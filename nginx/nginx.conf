worker_processes auto;
events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  client_max_body_size 200m;

  upstream portal_up {
    server portal:8000;
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  server {
    listen 80;
    server_name _;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "DENY" always;
    add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: blob:; connect-src 'self'; frame-ancestors 'none'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline';" always;

    # 443 kullanacaksanÄ±z:
    # listen 443 ssl http2;
    # ssl_certificate     /etc/nginx/certs/fullchain.pem;
    # ssl_certificate_key /etc/nginx/certs/privkey.pem;

    # Portal (root)
    location / {
      proxy_pass http://portal_up;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    # location /static/ {
    #   # Serve pre-built assets directly from ``portal/static``.
    #   rewrite ^/static/(.*)$ /$1 break;
    #   try_files /app/portal/static$uri =404;
    #   expires 7d;
    #   add_header Cache-Control "public";
    # }

    location /static/ {
      # Serve pre-built assets directly from the shared volume instead of
      # proxying through the Flask application. This avoids 404 errors when
      # requesting files like `/static/app.js`.
      alias /app/portal/static-dist/;
      expires 30d;
      add_header Cache-Control "public";
    }

  }
}
