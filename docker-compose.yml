services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [qdms]

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redisdata:/data
    networks: [qdms]

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # S3 API (içeride kalsın; internetten açmayın)
      - "9001:9001"   # MinIO Console (sadece LAN)
    volumes:
      - miniodata:/data
    networks: [qdms]

  # İlk açılışta bucket/versiyon/lock politikalarını ayarlar
  minio-setup:
    image: minio/mc:latest
    depends_on: [minio]
    networks: [qdms]
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb --ignore-existing --with-lock local/${MINIO_BUCKET_MAIN} &&
      mc mb --ignore-existing --with-lock local/${MINIO_BUCKET_ARCHIVE} &&
      mc mb --ignore-existing local/${MINIO_BUCKET_PREVIEWS} &&
      mc version enable local/${MINIO_BUCKET_MAIN} &&
      mc version enable local/${MINIO_BUCKET_ARCHIVE} &&
      mc ilm add local/${MINIO_BUCKET_ARCHIVE} --expiry-days 3650 --noncurrent-expiry-days 3650 &&
      echo 'MinIO buckets ready.';
      "
    restart: "no"


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks: [qdms]

  clamav:
    image: clamav/clamav:latest
    restart: unless-stopped
    networks: [qdms]

  portal:
    build:
      context: .
      dockerfile: portal/Dockerfile
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${PORTAL_SECRET_KEY}
      DEBUG: ${PORTAL_DEBUG}
      PORTAL_BIND: ${PORTAL_BIND}
      BIND: ${PORTAL_BIND}
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_PUBLIC_ENDPOINT: ${S3_PUBLIC_ENDPOINT}
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET_MAIN: ${S3_BUCKET_MAIN}
      S3_BUCKET_ARCHIVE: ${S3_BUCKET_ARCHIVE}
      S3_BUCKET_PREVIEWS: ${S3_BUCKET_PREVIEWS}
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE}
      LDAP_ENABLED: ${LDAP_ENABLED}
      LDAP_URL: ${LDAP_URL}
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      LDAP_USER: ${LDAP_USER}
      LDAP_PASSWORD: ${LDAP_PASSWORD}
      LDAP_SEARCH_FILTER: ${LDAP_SEARCH_FILTER}
      PORTAL_JWT_SECRET: ${PORTAL_JWT_SECRET}
      ELASTIC_URL: ${ELASTIC_URL}
      AV_SCAN_ENABLED: ${AV_SCAN_ENABLED}
      CLAMD_HOST: ${CLAMD_HOST}
      CLAMD_PORT: ${CLAMD_PORT}
      CLAMD_SOCKET: ${CLAMD_SOCKET}
    depends_on:
      - postgres
      - redis
      - minio
      - minio-setup
      - elasticsearch
      - clamav
    networks: [qdms]
    volumes:
      # Shared volume for static assets built at image creation. The contents
      # are copied from the image into this volume on first run so nginx can
      # serve them.
      - portal_static:/app/portal/static-dist

  worker:
    build:
      context: .
      dockerfile: portal/Dockerfile
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${PORTAL_SECRET_KEY}
      DEBUG: ${PORTAL_DEBUG}
      PORTAL_BIND: ${PORTAL_BIND}
      BIND: ${PORTAL_BIND}
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET_MAIN: ${S3_BUCKET_MAIN}
      S3_BUCKET_ARCHIVE: ${S3_BUCKET_ARCHIVE}
      S3_BUCKET_PREVIEWS: ${S3_BUCKET_PREVIEWS}
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE}
      LDAP_ENABLED: ${LDAP_ENABLED}
      LDAP_URL: ${LDAP_URL}
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      LDAP_USER: ${LDAP_USER}
      LDAP_PASSWORD: ${LDAP_PASSWORD}
      LDAP_SEARCH_FILTER: ${LDAP_SEARCH_FILTER}
      PORTAL_JWT_SECRET: ${PORTAL_JWT_SECRET}
      ELASTIC_URL: ${ELASTIC_URL}
      AV_SCAN_ENABLED: ${AV_SCAN_ENABLED}
      CLAMD_HOST: ${CLAMD_HOST}
      CLAMD_PORT: ${CLAMD_PORT}
      CLAMD_SOCKET: ${CLAMD_SOCKET}
    command: python -m rq.worker
    depends_on:
      - postgres
      - redis
      - minio
      - minio-setup
      - elasticsearch
      - clamav
    networks: [qdms]

  scheduler:
    image: python:3.12-slim
    working_dir: /app
    volumes:
      - "./portal:/app"
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${PORTAL_SECRET_KEY}
      DEBUG: ${PORTAL_DEBUG}
      PORTAL_BIND: ${PORTAL_BIND}
      BIND: ${PORTAL_BIND}
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET_MAIN: ${S3_BUCKET_MAIN}
      S3_BUCKET_ARCHIVE: ${S3_BUCKET_ARCHIVE}
      S3_BUCKET_PREVIEWS: ${S3_BUCKET_PREVIEWS}
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE}
      LDAP_ENABLED: ${LDAP_ENABLED}
      LDAP_URL: ${LDAP_URL}
      LDAP_DOMAIN: ${LDAP_DOMAIN}
      LDAP_USER: ${LDAP_USER}
      LDAP_PASSWORD: ${LDAP_PASSWORD}
      LDAP_SEARCH_FILTER: ${LDAP_SEARCH_FILTER}
      PORTAL_JWT_SECRET: ${PORTAL_JWT_SECRET}
      ELASTIC_URL: ${ELASTIC_URL}
      AV_SCAN_ENABLED: ${AV_SCAN_ENABLED}
      CLAMD_HOST: ${CLAMD_HOST}
      CLAMD_PORT: ${CLAMD_PORT}
      CLAMD_SOCKET: ${CLAMD_SOCKET}
    command: >
      sh -c "pip install -r requirements.txt &&
             ( while :; do python archive_job.py; sleep 86400; done ) &
             ( while :; do python dif_overdue_job.py; sleep 3600; done ) &
             ( while :; do python clear_locks_job.py; sleep 300; done ) &
             ( while :; do python periodic_review.py; sleep 31536000; done ) &
             wait"
    depends_on:
      - postgres
      - redis
      - minio
      - minio-setup
      - elasticsearch
      - clamav
    networks: [qdms]

  nginx:
    image: nginx:1.27-alpine
    restart: unless-stopped
    depends_on:
      - portal
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Serve static assets built at image creation
      - portal_static:/app/portal/static-dist:ro
      - nginx_cache:/var/cache/nginx
      # SSL sertifikası kullanacaksanız aşağıyı açın ve dosyaları koyun
      # - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      # - "443:443"
    networks: [qdms]

volumes:
  pgdata:
  redisdata:
  miniodata:
  nginx_cache:

  portal_static:

networks:
  qdms:
    driver: bridge
